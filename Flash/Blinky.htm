<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Sun Sep 22 21:58:11 2019
<BR><P>
<H3>Maximum Stack Usage =        220 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; helloScreen &rArr; menuScreen &rArr; gameScreen &rArr; winScreen &rArr; LCDPutStr &rArr; LCDPutChar &rArr; WriteSpiData
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[1]">Undef_Handler</a>
 <LI><a href="#[2]">SWI_Handler</a>
 <LI><a href="#[3]">PAbt_Handler</a>
 <LI><a href="#[4]">DAbt_Handler</a>
 <LI><a href="#[5]">IRQ_Handler</a>
 <LI><a href="#[6]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">Undef_Handler</a><BR>
 <LI><a href="#[2]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">SWI_Handler</a><BR>
 <LI><a href="#[3]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">PAbt_Handler</a><BR>
 <LI><a href="#[4]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">DAbt_Handler</a><BR>
 <LI><a href="#[5]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">IRQ_Handler</a><BR>
 <LI><a href="#[6]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">DAbt_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[6]">FIQ_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[5]">IRQ_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[3]">PAbt_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[2]">SWI_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[1]">Undef_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from sam7.o(RESET)
 <LI><a href="#[a]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[8]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[9]">tim0_isr</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[3f]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3c]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[40]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[41]"></a>_main_cpp_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[42]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[43]"></a>__rt_final_cpp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[44]"></a>__rt_final_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f]"></a>delay_us</STRONG> (ARM, 40 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[e]"></a>delay_ms</STRONG> (ARM, 40 bytes, Stack size 4 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;helloScreen
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuScreen
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winScreen
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authorScreen
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optionScreen
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLcd
</UL>

<P><STRONG><a name="[35]"></a>InitSpi</STRONG> (ARM, 160 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>WriteSpiCommand</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteSpiCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutChar
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPixel
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLcd
</UL>

<P><STRONG><a name="[12]"></a>WriteSpiData</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteSpiData
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutChar
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPixel
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLcd
</UL>

<P><STRONG><a name="[10]"></a>InitLcd</STRONG> (ARM, 208 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitLcd &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>LCDClearScreen</STRONG> (ARM, 108 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCDClearScreen &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;helloScreen
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuScreen
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winScreen
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authorScreen
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optionScreen
</UL>

<P><STRONG><a name="[14]"></a>LCDSetPixel</STRONG> (ARM, 112 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCDSetPixel &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetCircle
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetLine
</UL>

<P><STRONG><a name="[15]"></a>LCDSetLine</STRONG> (ARM, 196 bytes, Stack size 36 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCDSetLine &rArr; LCDSetPixel &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameNet
</UL>

<P><STRONG><a name="[16]"></a>LCDSetCircle</STRONG> (ARM, 312 bytes, Stack size 60 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCDSetCircle &rArr; LCDSetPixel &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawResultFilledDots
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawResultDots
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCircleLine
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCircleCursor
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuScreen
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optionScreen
</UL>

<P><STRONG><a name="[17]"></a>LCDPutChar</STRONG> (ARM, 256 bytes, Stack size 48 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiData
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNumberLine
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNumber
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
</UL>

<P><STRONG><a name="[18]"></a>LCDPutStr</STRONG> (ARM, 96 bytes, Stack size 36 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCDPutStr &rArr; LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;helloScreen
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuScreen
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winScreen
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authorScreen
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optionScreen
</UL>

<P><STRONG><a name="[9]"></a>tim0_isr</STRONG> (ARM, 92 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tim0_isr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>optionScreen</STRONG> (ARM, 720 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = optionScreen &rArr; LCDPutStr &rArr; LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetCircle
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuScreen
</UL>

<P><STRONG><a name="[1b]"></a>authorScreen</STRONG> (ARM, 100 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = authorScreen &rArr; LCDPutStr &rArr; LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuScreen
</UL>

<P><STRONG><a name="[20]"></a>clearAfterGame</STRONG> (ARM, 48 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winScreen
</UL>

<P><STRONG><a name="[1f]"></a>clearResultHistoryArray</STRONG> (ARM, 56 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winScreen
</UL>

<P><STRONG><a name="[1e]"></a>clearChooseHistoryArray</STRONG> (ARM, 56 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winScreen
</UL>

<P><STRONG><a name="[1c]"></a>winScreen</STRONG> (ARM, 216 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = winScreen &rArr; LCDPutStr &rArr; LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearChooseHistoryArray
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearResultHistoryArray
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearAfterGame
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[2d]"></a>saveResultValues</STRONG> (ARM, 192 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[2c]"></a>saveChoosenValues</STRONG> (ARM, 88 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[2b]"></a>checkValues</STRONG> (ARM, 164 bytes, Stack size 20 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = checkValues
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[22]"></a>resetFlagArray</STRONG> (ARM, 32 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateNumbers
</UL>

<P><STRONG><a name="[21]"></a>generateNumbers</STRONG> (ARM, 76 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = generateNumbers &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetFlagArray
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[24]"></a>gameScreen</STRONG> (ARM, 1080 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = gameScreen &rArr; winScreen &rArr; LCDPutStr &rArr; LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawResultFilledDots
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawResultDots
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNumberLine
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNumber
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameNet
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCircleLine
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCircleCursor
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateNumbers
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkValues
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveChoosenValues
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveResultValues
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winScreen
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearChooseHistoryArray
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearResultHistoryArray
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearAfterGame
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutChar
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetCircle
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuScreen
</UL>

<P><STRONG><a name="[32]"></a>menuScreen</STRONG> (ARM, 612 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = menuScreen &rArr; gameScreen &rArr; winScreen &rArr; LCDPutStr &rArr; LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authorScreen
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optionScreen
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetCircle
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;helloScreen
</UL>

<P><STRONG><a name="[34]"></a>helloScreen</STRONG> (ARM, 96 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = helloScreen &rArr; menuScreen &rArr; gameScreen &rArr; winScreen &rArr; LCDPutStr &rArr; LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuScreen
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutStr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>main</STRONG> (ARM, 136 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = main &rArr; helloScreen &rArr; menuScreen &rArr; gameScreen &rArr; winScreen &rArr; LCDPutStr &rArr; LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;helloScreen
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearChooseHistoryArray
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearResultHistoryArray
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearScreen
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLcd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSpi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[25]"></a>drawGameNet</STRONG> (ARM, 132 bytes, Stack size 16 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = drawGameNet &rArr; LCDSetLine &rArr; LCDSetPixel &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetLine
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[26]"></a>drawCircleLine</STRONG> (ARM, 124 bytes, Stack size 8 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = drawCircleLine &rArr; LCDSetCircle &rArr; LCDSetPixel &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[29]"></a>drawCircleCursor</STRONG> (ARM, 88 bytes, Stack size 8 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = drawCircleCursor &rArr; LCDSetCircle &rArr; LCDSetPixel &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[2a]"></a>drawNumber</STRONG> (ARM, 96 bytes, Stack size 24 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = drawNumber &rArr; LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[27]"></a>drawNumberLine</STRONG> (ARM, 100 bytes, Stack size 40 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = drawNumberLine &rArr; LCDPutChar &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[28]"></a>drawResultDots</STRONG> (ARM, 124 bytes, Stack size 8 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = drawResultDots &rArr; LCDSetCircle &rArr; LCDSetPixel &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[2e]"></a>drawResultFilledDots</STRONG> (ARM, 864 bytes, Stack size 16 bytes, draw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = drawResultFilledDots &rArr; LCDSetCircle &rArr; LCDSetPixel &rArr; WriteSpiData
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>__aeabi_idivmod</STRONG> (ARM, 60 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateNumbers
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim0_isr
</UL>

<P><STRONG><a name="[23]"></a>rand</STRONG> (ARM, 36 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateNumbers
</UL>

<P><STRONG><a name="[33]"></a>srand</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuScreen
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_dmul</STRONG> (ARM, 284 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_i2d</STRONG> (ARM, 52 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_d2iz</STRONG> (ARM, 88 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_uidivmod</STRONG> (ARM, 64 bytes, Stack size 8 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_llsr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[47]"></a>_ll_ushift_r</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_double_round</STRONG> (ARM, 36 bytes, Stack size 0 bytes, depilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[37]"></a>_double_epilogue</STRONG> (ARM, 248 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _double_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[d]"></a>__scatterload</STRONG> (ARM, 40 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[49]"></a>__scatterload_rt2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_llsl</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4a]"></a>_ll_shift_l</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__0sprintf$1</STRONG> (ARM, 56 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>__1sprintf$1</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[1d]"></a>__2sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameScreen
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winScreen
</UL>

<P><STRONG><a name="[39]"></a>__ARM_clz</STRONG> (ARM, 68 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload_copy</STRONG> (ARM, 28 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4d]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4e]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>_printf_core</STRONG> (ARM, 524 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[a]"></a>_sputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
